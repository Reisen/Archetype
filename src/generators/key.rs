use std::error::Error;
use url::Url;

pub struct GeneratedMaterial {
    pub output_key: Vec<u8>,
}

fn get_query(url: &Url, arg: &str) -> Result<String, Box<dyn Error>> {
    url.query_pairs()
        .find(|x| (*x).0 == arg)
        .map(|x| x.1)
        .ok_or(format!("Could not find argument: {}", arg).into())
        .map(|s| s.to_string())
}

// Generate Key material of some byte length N.
//
// URI Format Example:
// key:///file.txt?length=256
pub fn generate_key_material(
    url: Url,
    key: &[u8],
    print: bool,
) -> Result<GeneratedMaterial, Box<dyn Error>> {
    use hmac::{Hmac, Mac};
    use sha2::Sha256;

    // Vector to collect generated bytes into.
    let mut key_material = Vec::new();

    let length: usize = get_query(&url, "length")?.parse()?;

    // Enter a hash loop generating bytes until we've collected enough to
    // satisfy the caller. We can stop at 1024 bytes as there are few
    // services that needs keys that large.
    while key_material.len() < length && length <= 1024 {
        let key = {
            let mut key = Hmac::<Sha256>::new_varkey(&key).unwrap();
            key.input(&key_material.len().to_be_bytes());
            key.result().code()
        };

        // Shovel bytes onto key_material.
        key_material.append(&mut key.to_vec());
    }

    if key_material.len() > length {
        key_material.resize(length, 0);
    }

    println!("{}", hex::encode(&key_material));

    Ok(GeneratedMaterial {
        output_key: key_material,
    })
}
